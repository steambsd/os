#!/bin/sh
############################################
###          SIMPLE INSTALLATION         ###
###                 STEAM                ###   
###              ON FREEBSD              ###
############   set permission   ############
chmod +x reconfig
chmod +x reconfig-mini
chmod +x steam-acolyte
chmod +x steam-compat
chmod +x steam-wine
chmod +x steam-winepro
chmod +x yet.py
chmod +x utils
chmod +x boost
chmod +x idc
chmod +x idp
chmod +x idw
chmod +x info
chmod +x video-stream
chmod +x video-camera
chmod +x network

############################################
### Variables                            ###
############################################
# type of installation
#if [ -d All ]; then TYPI="L"; fi
# main dir
MATH=`echo $PWD`
# user with wheel group
AZER=$1
# choose driver for your PC, it may be: 
# nvidia, amdgpu, radeon, intel or vesa
DRIV=$2
# desktop environment 
DENV=$3
# version
VERS=`uname -r | cut -d'-' -f1`
#VERS='12.0' #not tested
#VERS='12.1' #rebuild drm
#VERS='12.2' #without drm

############################################
### Function                             ###
############################################
# package type installation (local or inet)
pli()
{
if [ -d All ]; then
zvar=`ls All | grep $1 | awk '{ print length, $0 }' | sort -n | cut -d" " -f2- | head -1`
 if [ "$zvar" == '' ]; then
  pkg ins -y $1
 else 
  pkg add All/$zvar
 fi
#pkg add All/$1-*
else
pkg ins -y $1
fi
}

############################################
### Update                               ###
############################################
if [ -d All ]; then
tar xf All/pkg-* -s ",/.*/,,g" "*/pkg-static"
./pkg-static add All/pkg-*
else
# system
env PAGER=cat freebsd-update fetch
freebsd-update install
# pkg
env ASSUME_ALWAYS_YES=YES pkg bootstrap
env ASSUME_ALWAYS_YES=YES pkg update -f
fi

############################################
### Check mode                           ###
############################################
CHK=`ls /dev | grep md0 | head -n1`
if [ "$CHK" == 'md0' ]; then 
 ETH=`ifconfig | grep flags | cut -d\: -f1 | head -n1 | tail -n1`
 dhclient $ETH
fi
CHK=`ls /dev | grep md1 | head -n1`
if [ "$CHK" == "md1" ]; then echo '==> Detected minimal mode'; fi

if [ "$DENV" == "mini" ]; then 
pli xorg
pli lumina
pli zenity
pli chromium
pli pc-networkmanager
echo 'start-lumina-desktop' >> /root/.xinitrc
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf
Section "Device"
         Identifier "Vesa"
         Driver "vesa"
EndSection
EOF

cp reconfig-mini /root/
cp utils /root/.utils
mkdir /usr/local/share/wallpapers
cp wall.jpg /usr/local/share/wallpapers/wall.jpg
mkdir /usr/local/share/pixmaps
cp yinstall.png /usr/local/share/pixmaps/yinstall.png
cp yrchrome.png /usr/local/share/pixmaps/yrchrome.png

cat << EOF > /usr/local/etc/xdg/autostart/reconfig-mini.desktop 
[Desktop Entry]
Name=reconfig-mini
Type=Application
Exec=xterm -geometry 50x15+0-50 -e ~/reconfig-mini
Terminal=false
EOF

su root -c 'startx'

echo '==> Minimal installation fineshed. Press any key to proceed'
read ans
/bin/sh
exit 0
fi

############################################
### Check system                         ###
############################################
# blank arguments
case "$#" in
0)
 # default: user - admin, driver - nvidia, desktop - lumina
 AZER='admin'
 pw useradd $AZER -m -b /usr/home -G wheel; echo 0000 | pw usermod $AZER -h0
 DRIV='auto'
 DENV='lumina'
 ;;
3)
 # add if not exist
 pw usershow $AZER || chk=1
 if [ $chk = 1 ]; then
  echo "Create user $AZER"
  pw useradd $AZER -m
  echo '0000' | pw usermod $AZER -h0
 fi
 # try to wheel
 pw usermod $AZER -G wheel
 ;;
*)
 echo "Error. Please, type three arguments."
 echo "Usage: $0 [your_user] [video_driver] [your_desktop]"
 exit 0
 ;;
esac

############################################
### Motd                            ###
############################################
# Build date used for motd and product file
BUILDDATE=$(date +%Y%m%d)
RELEASE="$VERS"
DOC_URL="https://lpros.blogspot.com/"

# Creating /etc/motd
cat << MOTD > /etc/motd.safe
SteamBSD $RELEASE $BUILDDATE
$DOC_URL
MOTD
# Creating /etc/product file
cat << PRODUCT > /etc/product.safe
Name: SteamBSD Instance
Image: SteamBSD $RELEASE $BUILDDATE
Documentation: $DOC_URL
Description: SteamBSD $RELEASE 64-bit image with just essential packages \
installed. Find your favorite game and forget about everything \
that might bother you.
PRODUCT

############################################
### Bugs                                 ###
############################################
# drm-kmod not work on FreeBSD 12.2
#if [ $DRIV != 'nvidia' ]; then DRIV='vesa'; fi

############################################
### Tuning                               ###
############################################
# thermal monitoring
hwmodel=`sysctl hw.model | cut -d' ' -f2 | head -c3`
case "$hwmodel" in
Int)
 # detect intel processor
 sysrc -f /boot/loader.conf coretemp_load=YES
 kldload coretemp
 ;;
AMD)
 # detect amd processor
 sysrc -f /boot/loader.conf amdtemp_load=YES
 kldload amdtemp
 ;;
*)
 # using two modules
 sysrc -f /boot/loader.conf coretemp_load=YES
 sysrc -f /boot/loader.conf amdtemp_load=YES
 kldload coretemp
 kldload amdtemp
 exit 0
 ;;
esac

# main option for /boot/loader.conf
sysrc -f /boot/loader.conf autoboot_delay=2
sysrc -f /boot/loader.conf beastie_disable=YES
# /etc/sysctl.conf
echo 'kern.coredump=0' >> /etc/sysctl.conf
sysctl kern.coredump=0
echo 'kern.shutdown.poweroff_delay=500' >> /etc/sysctl.conf
sysctl kern.shutdown.poweroff_delay=500
echo 'vfs.zfs.arc_max=536870912' >> /etc/sysctl.conf
sysctl vfs.zfs.arc_max=536870912
echo 'hw.usb.no_shutdown_wait=1' >> /etc/sysctl.conf
sysctl hw.usb.no_shutdown_wait=1
# /etc/rc.conf
sysrc clear_tmp_enable=YES
/etc/rc.d/cleartmp start
cat << EOF >> /etc/crontab
@reboot                                 root    /etc/rc.d/cleartmp start
@reboot                                 root    rm /home/${AZER}/*.log
EOF
sysrc sendmail_enable=NO
sysrc moused_enable=NO
sysrc sshd_enable=NO

############################################
### Prepare                              ###
############################################
# privilegies
pli doas
pli sudo
pli bash
echo 'permit nopass keepenv :wheel' >> /usr/local/etc/doas.conf
echo 'permit nopass keepenv root as root' >> /usr/local/etc/doas.conf
echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /usr/local/etc/sudoers
pw usermod $AZER -s /usr/local/bin/bash
# user for steam
pw useradd steam -m
pw usermod steam -s /usr/local/bin/bash
# user for steam development
pw useradd steamdev -m
pw usermod steamdev -s /usr/local/bin/bash
# terminal customization
echo alias ls=\'ls -G\' >> /root/.bashrc
echo alias ls=\'ls -G\' >> /home/$AZER/.bashrc
# linux
sysrc linux_enable=YES
sysrc linux64_enable=YES
kldload linux
kldload linux64

############################################
### Packages                             ###
############################################
# web
pli wget
pli curl
# packages for WM
pli xorg
pli slim
# packages for wine
pli wine
pli winetricks
pli wine-mono
pli wine-gecko
# packages for linux
pli linux-steam-utils
# packages for console
pli neofetch
pli mc-4
pli unrar
pli gtar
#pli p7zip
pli htop
# packages for info
pli lxterminal
pli leafpad
# packages for comfort
pli feh
pli chromium
pli mpv
pli simplescreenrecorder
pli quiterss
pli abseil
pli telegram-desktop
# packages for desktop
pli compton
pli cairo-clock
# python38
pli python38
pli py38-setuptools
# compat
pli gcc 
pli linux-c7-devtools 
pli linux-c7-libgfortran 
pli linux_libusb 
pli wine-proton 
pli libc6-shim
pli python3
pli python37
# 3d test
pli vulkan-tools
pli mesa-demos
# web-camera
pli webcamd
pli pwcview
pli v4l-utils
pli v4l_compat
# battery
pli batterycat
# games
pli ctris
pli foobillard
# emulators
#pli dgen-sdl
#pli ppsspp

############################################
### PIP - python package manager         ###
############################################
/usr/local/bin/python3.7 get-pip.py

############################################
### DVD, USB and CLOUD                   ###
############################################
# Common
cat << EOF >> /etc/devfs.conf

# Allow all users to access optical media
perm    /dev/acd0       0666
perm    /dev/acd1       0666
perm    /dev/cd0        0666
perm    /dev/cd1        0666
# Allow all USB Devices to be mounted
perm    /dev/da0        0666
perm    /dev/da1        0666
perm    /dev/da2        0666
perm    /dev/da3        0666
perm    /dev/da4        0666
perm    /dev/da5        0666
# Misc other devices
perm    /dev/pass0      0666
perm    /dev/xpt0       0666
perm    /dev/uscanner0  0666
perm    /dev/video0     0666
perm    /dev/tuner0     0666
perm    /dev/dvb/adapter0/demux0    0666
perm    /dev/dvb/adapter0/dvr       0666
perm    /dev/dvb/adapter0/frontend0 0666
# HDD
perm    /dev/ada0        0666
perm    /dev/ada1        0666
# NVD
perm    /dev/nvd0        0666
perm    /dev/nvd1        0666
EOF
cat << EOF >> /etc/devfs.rules
[system=10]
add path 'ad[0-9]\*'    mode 666
add path 'ada[0-9]\*'   mode 666
add path 'nvd[0-9]\*'   mode 666
add path 'da[0-9]\*'    mode 666
add path 'acd[0-9]\*'   mode 666
add path 'cd[0-9]\*'    mode 666
add path 'mmcsd[0-9]\*' mode 666
add path 'pass[0-9]\*'  mode 666
add path 'xpt[0-9]\*'   mode 666
add path 'ugen[0-9]\*'  mode 666
add path 'usbctl'       mode 666
add path 'usb/\*'       mode 666
add path 'lpt[0-9]\*'   mode 666
add path 'ulpt[0-9]\*'  mode 666
add path 'unlpt[0-9]\*' mode 666
add path 'fd[0-9]\*'    mode 666
add path 'uscan[0-9]\*' mode 666
add path 'video[0-9]\*' mode 666
add path 'tuner[0-9]*'  mode 666
add path 'dvb/\*'       mode 666
EOF
echo 'vfs.usermount=1' >> /etc/sysctl.conf
sysctl vfs.usermount=1
sysrc devfs_system_ruleset=system
service devfs start
service devd start

# DVD
pli tkdvd
sysrc -f /boot/loader.conf udf_load=YES
kldload udf

# USB & HDD & SSD & NVD
sysrc -f /boot/loader.conf fusefs_load=YES
kldload fusefs
sysrc -f /boot/loader.conf ext2fs_load=YES
kldload ext2fs
echo 'export NTFS_USE_UBLIO=0' >> /home/$AZER/.bashrc

## Automount using sysutils/automount
pli automount
cat << EOF >> /usr/local/etc/automount.conf
USERUMOUNT=YES
ATIME=NO
REMOVEDIRS=YES
USER=$AZER
ENCODING=pl_PL.UTF-8
CODEPAGE=cp852
EOF
service devfs restart
service devd restart

#Drivers
#pli dsbdriverd
#sysrc dsbdriverd_enable=YES
#service dsbdriverd start

#Printers
sysrc lpd_enable=YES
sysrc cupsd_enable=YES
sysrc cups_browsed_enable=YES
service lpd start
service cupsd start
service cups_browsed start

############################################
### Web-Cam                              ###
############################################
sysrc -f /boot/loader.conf cuse_load=YES
kldload cuse
sysrc webcamd_enable=YES
ncam=`usbconfig | grep CAM | cut -d':' -f1 | cut -d'n' -f2`
if [ "$ncam" != '' ]; then echo "webcamd_0_flags=\"-d ugen${ncam}\"" >> /etc/rc.conf; fi
ncam=`usbconfig | grep cam | cut -d':' -f1 | cut -d'n' -f2`
if [ "$ncam" != '' ]; then echo "webcamd_0_flags=\"-d ugen${ncam}\"" >> /etc/rc.conf; fi
ncam=`usbconfig | grep Cam | cut -d':' -f1 | cut -d'n' -f2`
if [ "$ncam" != '' ]; then echo "webcamd_0_flags=\"-d ugen${ncam}\"" >> /etc/rc.conf; fi
pw groupmod network -m $AZER
pw groupmod webcamd -m $AZER
pw groupmod video -m $AZER
#also work
#pw usermod $AZER -G operator,video
service webcamd start
service devd restart

############################################
### Driver                               ###
############################################
if [ "$DRIV" == "auto" ]
then
 gpu=`pciconf -lv | grep Intel`
 if [ "$gpu" != '' ]; then DRIV="intel"; fi
 gpu=`pciconf -lv | grep AMD`
 if [ "$gpu" != '' ]; then DRIV="amdgpu"; fi
 gpu=`pciconf -lv | grep NVIDIA`
 if [ "$gpu" != '' ]; then DRIV="nvidia"; fi
fi

case "$DRIV" in
 nvidia)
pli nvidia-driver
pli linux-nvidia-libs
pli nvidia-settings
sysrc kld_list="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-470)
pli nvidia-driver-470
pli linux-nvidia-libs-470
pli nvidia-settings
sysrc kld_list="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-390)
pli nvidia-driver-390
pli linux-nvidia-libs-390
pli nvidia-settings
sysrc kld_list="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-340)
pli nvidia-driver-340
pli linux-nvidia-libs-340
pli nvidia-settings
sysrc kld_list="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 nvidia-304)
pli nvidia-driver-304
pli linux-nvidia-libs-304
pli nvidia-settings
sysrc kld_list="/boot/modules/nvidia-modeset.ko"
kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 ;;
 amdgpu)
pli drm-kmod
pli xf86-video-amdgpu
sysrc kld_list="/boot/modules/amdgpu.ko"
#kldload /boot/modules/amdgpu.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "amdgpu"
#EndSection
#EOF
 ;;
 radeon)
pli drm-kmod
#pli xf86-video-ati
sysrc kld_list="/boot/modules/radeonkms.ko"
#kldload /boot/modules/radeonkms.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "radeonkms"
#EndSection
#EOF
 ;;
 intel)
pli drm-kmod
pli xf86-video-intel
sysrc kld_list="/boot/modules/i915kms.ko"
kldload /boot/modules/i915kms.ko
#cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
#Section "Device"
#        Identifier "Card0"
#        Driver     "intel"
#EndSection
#EOF
 ;;
 full)
 pli nvidia-driver
 pli linux-nvidia-libs
 pli nvidia-settings
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf.nvidia
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
 pli drm-kmod
 pli xf86-video-amdgpu 
 pli xf86-video-intel
 pli xf86-video-ati
 
 gpu=`pciconf -lv | grep Intel`
 if [ "$gpu" != '' ]; then DRIV="intel"; fi
 gpu=`pciconf -lv | grep AMD`
 if [ "$gpu" != '' ]; then DRIV="amdgpu"; fi
 gpu=`pciconf -lv | grep NVIDIA`
 if [ "$gpu" != '' ]; then DRIV="nvidia"; fi

###ATTENTION! Integrated block  
case "$DRIV" in
   nvidia)
    sysrc kld_list="/boot/modules/nvidia-modeset.ko"
    kldload /boot/modules/nvidia-modeset.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf
Section "Device"
        Identifier "NV Card"
        Driver "nvidia"
EndSection
EOF
   ;;
   amdgpu)
    sysrc kld_list="/boot/modules/amdgpu.ko"
    #kldload /boot/modules/amdgpu.ko
   ;;
   radeon)
    sysrc kld_list="/boot/modules/radeonkms.ko"
    #kldload /boot/modules/radeonkms.ko
   ;;
   intel)
    sysrc kld_list="/boot/modules/i915kms.ko"
    kldload /boot/modules/i915kms.ko
   ;;
   *)
    # nothing
   ;;
esac
###ATTENTION! Integrated block  

 ;;
 *)
 #cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf 
 # Section "Device"
 #    Identifier    "Card0"
 #    Driver        "vesa"
 # EndSection 
 #EOF
 ;;
esac

case "$VERS" in
 12.0)
  #cd /usr/ports/graphics/drm-kmod && make BATCH=yes deinstall build install clean 
 ;;
 12.1)
  #fetch https://download.freebsd.org/ftp/releases/amd64/12.1-RELEASE/base.txz
  #fetch https://download.freebsd.org/ftp/releases/amd64/12.1-RELEASE/lib32.txz
  #tar -xvf base.txz -C /data/jails/basejail && tar -xvf lib32.txz -C /data/jails/basejail
  #rm -rf base.txz && rm -rf lib32.txz
  svnlite checkout http://svn.freebsd.org/base/releng/12.1/ /usr/src
  fetch https://github.com/FreeBSDDesktop/kms-drm/archive/drm-v5.0-fbsd12.1.zip
  unzip drm-v5.0-fbsd12.1.zip 
  mv kms-drm-drm-v5.0-fbsd12.1 kms-drm
  cd kms-drm
  make
  make install
  rm -rf kms-drm
  rm -rf drm-v5.0-fbsd12.1.zip
  #cp ./pci.ids /usr/local/share/pciids/pci.ids
 ;;
 12.2)
  sysrc kld_list-="/boot/modules/amdgpu.ko"
  sysrc kld_list-="/boot/modules/i915kms.ko"
  sysrc kld_list-="/boot/modules/radeonkms.ko"
  kldunload "/boot/modules/amdgpu.ko"
  kldunload "/boot/modules/i915kms.ko"
  kldunload "/boot/modules/radeonkms.ko"
 ;;
 13.0)
  echo 'Nothing'
  
 ;;
 13.1)
  echo 'Detect latest system'
cat << EOF >> /etc/crontab
@reboot                                 root    mount /compat/linux/dev/shm
EOF
 ;;
 *)
  echo -n 'Script is not intended for installation on this version of the system: '
  echo -n $VERS

 ;;
esac

############################################
### Files                                ###
############################################
# copy gecko for wine
cp -R .cache /home/$AZER/.cache
# create documents folder
mkdir /home/$AZER/Documents
# cp other scripts
cp network /usr/local/bin/network
# copy steambsd scrips
cp video-camera /home/$AZER/.video-camera
cp video-stream /home/$AZER/.video-stream
cp boost /home/$AZER/.boost
cp idc /home/$AZER/.idc
cp idp /home/$AZER/.idp
cp idw /home/$AZER/.idw
cp info /home/$AZER/.info
cp logo /home/$AZER/.logo
cp config-neofetch /home/$AZER/.config-neofetch
cp reconfig /home/$AZER/
cp steam-wine /home/$AZER/.steam-wine.save
cp steam-winepro /home/$AZER/.steam-winepro.save
cp steam-compat /home/$AZER/.steam-compat.save
cp steam-acolyte /home/$AZER/.steam-acolyte.save
cp utils /home/$AZER/.utils
cp yet.py /home/$AZER/.yet.py
# wallpaper
mkdir /usr/local/share/wallpapers
cp wall.jpg /usr/local/share/wallpapers/wall.jpg
# icons
mkdir /usr/local/share/pixmaps
cp yinstall.png /usr/local/share/pixmaps/yinstall.png
cp ypsteam.png /usr/local/share/pixmaps/ypsteam.png
cp yrchrome.png /usr/local/share/pixmaps/yrchrome.png
cp ysacolyte.png /usr/local/share/pixmaps/ysacolyte.png
cp ysettings.png /usr/local/share/pixmaps/ysettings.png
cp ysettingsnew.png /usr/local/share/pixmaps/ysettingsnew.png
cp ystartboosting.png /usr/local/share/pixmaps/ystartboosting.png
#epic-games
unzip epic-games.zip
cd legendary-master
/usr/local/bin/python3.8 setup.py install
cd ..
echo alias epic=\'legendary\' >> /home/$AZER/.bashrc
echo alias epicpro=\'LGDRY_WINE_BINARY=/usr/local/bin/winepro legendary\' >> /home/$AZER/.bashrc
# winepro
echo '#!/bin/sh' > /usr/local/bin/winepro
echo 'WINEPREFIX=~/.winepro /opt/steam-utils/bin/lsu-wine-env wine $1' >> /usr/local/bin/winepro
chmod +x /usr/local/bin/winepro

# steam-linux-devel
unzip master.zip
cd linuxulator-steam-utils-master
make
make install
cd ..
mv /usr/local/bin/steam /usr/local/bin/steam.save
ln -s /opt/steam-utils/bin/steam /usr/local/bin/steam
# steam-acolyte
cp steam-acolyte.tar.xz /home/$AZER/steam-acolyte.tar.xz
cp Box/.i386-wine-pkg.tar.xz /home/$AZER/.i386-wine-pkg.tar.xz
# extensions
if [ -d Box ]; then
  cp Box/Extensions.tar.xz /home/$AZER/Extensions.tar.xz
  cd /home/$AZER
  tar xvf Extensions.tar.xz
  rm Extensions.tar.xz
else
  cd /home/$AZER
  fetch https://sourceforge.net/projects/extensions-chrome/files/Extensions.tar.xz/download
  tar xvf download
  rm download
fi
# unpack steam-acolyte
tar xvf steam-acolyte.tar.xz
rm steam-acolyte.tar.xz
chown -R $AZER:wheel /home/$AZER/.local
chmod -R +x /home/$AZER/.local/bin/
ln -s /home/$AZER/.local/bin/steam-acolyte /usr/local/bin/steam-acolyte
tar xvf .i386-wine-pkg.tar.xz
chown -R $1:wheel .i386-wine-pkg
rm .i386-wine-pkg.tar.xz
# steam-acolyte alias
echo 'export PATH=$PATH:.local/bin/' >> /home/$AZER/.bashrc

# block of steam installation
export PATH=$PATH:/usr/local/bin
su steamdev -c /opt/steam-utils/bin/steam-install
mv /home/steamdev/.steam /home/$AZER/.steam
su $AZER -c '/usr/local/wine-proton/bin/pkg32.sh install -y wine-proton mesa-dri'
chown -R $AZER:wheel /home/$AZER/.steam

echo '[Desktop Entry]' > /usr/local/etc/xdg/autostart/steam-start.desktop
echo 'Name=steam-start' >> /usr/local/etc/xdg/autostart/steam-start.desktop
echo 'Type=Application' >> /usr/local/etc/xdg/autostart/steam-start.desktop
echo 'Exec=steam' >> /usr/local/etc/xdg/autostart/steam-start.desktop
echo 'Terminal=false' >> /usr/local/etc/xdg/autostart/steam-start.desktop
echo 'X-GNOME-Autostart-Delay=2' >> /usr/local/etc/xdg/autostart/steam-start.desktop

echo 'linprocfs       /compat/linux/proc      linprocfs rw           0 0' >> /etc/fstab
echo 'linsysfs        /compat/linux/sys       linsysfs  rw           0 0' >> /etc/fstab
echo 'tmpfs           /compat/linux/dev/shm   tmpfs     rw,mode=1777 0 0' >> /etc/fstab
echo 'fdesc           /dev/fd                 fdescfs   rw           0 0' >> /etc/fstab
echo 'procfs          /proc                   procfs    rw           0 0' >> /etc/fstab

echo '[Desktop Entry]' > /usr/local/etc/xdg/autostart/mount-a.desktop
echo 'Name=mount-a' >> /usr/local/etc/xdg/autostart/mount-a.desktop
echo 'Type=Application' >> /usr/local/etc/xdg/autostart/mount-a.desktop
echo 'Exec=sudo mount -a' >> /usr/local/etc/xdg/autostart/mount-a.desktop
echo 'Terminal=false' >> /usr/local/etc/xdg/autostart/mount-a.desktop

############################################
### Wine                                 ###
############################################
echo '==> Downloading 32-bit wine packages...'
su $AZER -c '/usr/local/share/wine/pkg32.sh install -y wine mesa-dri'

############################################
### Login manager                        ###
############################################
# slim customization
sysrc dbus_enable=YES
#sysrc hald_enable=YES
sysrc slim_enable=YES
echo "default_user        $AZER" >> /usr/local/etc/slim.conf
echo 'auto_login          yes' >> /usr/local/etc/slim.conf
echo 'focus_password      yes' >> /usr/local/etc/slim.conf
# bugs
#cat << EOF >> /etc/crontab
#@reboot                                 root    ( sleep 2 ; service slim start )
#EOF

############################################
### Desktop environment                  ###
############################################
cd $MATH
pw groupmod operator -m $AZER
# choose desktop
case "$DENV" in
plasma)
pli plasma5-plasma
echo 'startplasma-x11' >> /home/$AZER/.xinitrc
 ;;
lumina)
pli lumina
echo 'start-lumina-desktop' >> /home/$AZER/.xinitrc
#echo "FM=\"lumina-fm\"" >> /usr/local/etc/automount.conf
pli pc-networkmanager
pli pc-mixer
cat << EOF > /usr/local/etc/xdg/autostart/pc-mixer.desktop 
[Desktop Entry]
Name=pc-mixer
Type=Application
Exec=pc-mixer
Terminal=false
EOF
 ;;
lxqt)
pli lxqt
echo 'startlxqt' >> /home/$AZER/.xinitrc
printf '%s\n' /General/a 'window_manager=openbox' . w q | ex -s /usr/local/share/lxqt/session.conf
 ;;
obox)
#this experemental function
pli openbox
pli obconf
pli pc-networkmanager
pli pc-mixer
pli pcmanfm
pli lxpanel

echo 'exec openbox-session' >> /home/$AZER/.xinitrc
mkdir /home/$AZER/Desktop
mkdir /home/$AZER/Downloads
mkdir /home/$AZER/.config
mkdir /home/$AZER/.config/openbox
cp /usr/local/etc/xdg/openbox/*.* /home/$AZER/.config/openbox
#cp menu.xml /home/$AZER/.config/openbox/menu.xml
cat << EOF >> /home/$AZER/.cosmos
xclock -geometry 200x200-50+50
EOF
cat << EOF >> /home/$AZER/.config/openbox/autostart
sudo mount -a
lxpanel &
feh --bg-scale /usr/local/share/wallpapers/wall.jpg &
xterm -geometry 50x15+0-50 -e ~/reconfig &
xterm -geometry 40x4-750+0 -e ~/.steam-wine &
xterm -geometry 40x4-500+0 -e ~/.steam-winepro &
xterm -geometry 40x4-250+0 -e ~/.steam-compat &
xterm -geometry 40x4-0+0 -e ~/.steam-acolyte &
pc-mixer &
sudo pc-nettray &
winetricks -q 7zip &
steam &
EOF
cat << EOF > /home/$AZER/.config/openbox/menu.xml
<?xml version="1.0" encoding="UTF-8"?>

<openbox_menu xmlns="http://openbox.org/3.4/menu">

<menu id="apps-main-menu" label="Desktop">
  <item label="Steam-Acolyte">
    <action name="Execute">
      <command>steam-acolyte</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>
  <item label="Boost">
    <action name="Execute">
      <command>xterm -geometry 40x4+0-0 -e ./.boost</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>
   <item label="Chrome">
    <action name="Execute">
      <command>chrome --show-fps-counter --force-dark-mode --window-size=640,760 --window-position=640,0 https://stadia.google.com/</command>
      <startupnotify>
        <enabled>yes</enabled>
        <wmclass>Chrome</wmclass>
      </startupnotify>
    </action>
  </item> 
  <item label="Terminal">
    <action name="Execute">
      <command>lxterminal --geometry=84x24 -e ./.info</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>
  <item label="Utils">
    <action name="Execute">
      <command>xterm -geometry 73x55-0-25 -e ./.utils</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>
</menu>

<menu id="system-menu" label="System">
  <item label="Openbox Configuration Manager">
    <action name="Execute">
      <command>obconf</command>
      <startupnotify><enabled>yes</enabled></startupnotify>
    </action>
  </item>
  <item label="Batterycat">
    <action name="Execute">
      <command>batterycat</command>
      <startupnotify><enabled>yes</enabled></startupnotify>
    </action>
  </item>
  <item label="Htop">
    <action name="Execute">
      <command>xterm -e htop</command>
      <startupnotify><enabled>yes</enabled></startupnotify>
    </action>
  </item>
  <item label="Other">
    <action name="Execute">
      <command>xterm -geometry 73x31-0-25 -e ./.cosmos</command>
      <startupnotify><enabled>yes</enabled></startupnotify>
    </action>
  </item>
  <item label="Manage Cups Printers">
    <action name="Execute">
      <command>xdg-open http://localhost:631/</command>
      <startupnotify>
        <enabled>no</enabled>
        <icon>cups</icon>
      </startupnotify>
    </action>
  </item>
  <separator />
  <item label="Reconfigure Openbox">
    <action name="Reconfigure" />
  </item>
</menu>

<menu id="root-menu" label="Openbox 3">
  <separator label="Applications" />
  <menu id="apps-main-menu"/>
  <separator label="System" />
  <menu id="system-menu"/>
  <separator />
  <item label="Log Out">
    <action name="Exit">
      <prompt>yes</prompt>
    </action>
  </item>
   <item label="Reboot">
    <action name="Execute">
      <command>sudo reboot</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>
  <item label="Poweroff">
    <action name="Execute">
      <command>sudo poweroff</command>
      <startupnotify>
        <enabled>yes</enabled>
      </startupnotify>
    </action>
  </item>  
</menu>

</openbox_menu>
EOF
echo sessiondir /usr/local/share/xsessions/ >> /usr/local/slim.conf
 ;;
lxde)
pli lxde-meta
pli pc-networkmanager
echo 'startlxde' >> /home/$AZER/.xinitrc
#pkg delete -f -y pc-mixer
printf '%s\n' /config/a 'quick_exec=1' . w q | ex -s /usr/local/etc/xdg/libfm/libfm.conf
 ;;
*)
 echo "Error. Unrecognized desktop."
 exit 0
 ;;
esac

# adding buttons
#cat << EOF >> /usr/local/etc/polkit-1/rules.d/50-default.rules
#polkit.addRule(function (action, subject) 
#  if ((action.id == "org.freedesktop.consolekit.system.restart" ||
#      action.id == "org.freedesktop.consolekit.system.stop")
#      && subject.isInGroup("wheel")) {
#    return polkit.Result.YES;
#  }
#});
#EOF

# autostart
cat << EOF > /usr/local/etc/xdg/autostart/reconfig.desktop 
[Desktop Entry]
Name=reconfig
Type=Application
Exec=xterm -geometry 50x15+0-50 -e ~/reconfig
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/steam-wine.desktop 
[Desktop Entry]
Name=steam-wine
Type=Application
Exec=xterm -geometry 40x4-750+0 -e ~/.steam-wine
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/steam-winepro.desktop 
[Desktop Entry]
Name=steam-winepro
Type=Application
Exec=xterm -geometry 40x4-500+0 -e ~/.steam-winepro
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/steam-compat.desktop 
[Desktop Entry]
Name=steam-compat
Type=Application
Exec=xterm -geometry 40x4-250+0 -e ~/.steam-compat
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/steam-acolyte.desktop 
[Desktop Entry]
Name=steam-acolyte
Type=Application
Exec=xterm -geometry 40x4-0+0 -e ~/.steam-acolyte
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/cairo-clock.desktop 
[Desktop Entry]
Name=cairo-clock
Type=Application
Exec=cairo-clock -w 200 -h 200 -x 200 -y 200 -s -t simple
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/compton.desktop 
[Desktop Entry]
Name=compton
Type=Application
Exec=compton
Terminal=false
EOF
cat << EOF > /usr/local/etc/xdg/autostart/wine.desktop 
[Desktop Entry]
Name=wine
Type=Application
Exec=winetricks -q 7zip
Terminal=false
EOF

############################################
### Custom stage                         ###
############################################
# update packages
pkg update
# update winetricks
#winetricks --self-update
# disable some packages
mv /usr/local/bin/xscreensaver /usr/local/bin/xscreensaver.save
touch /usr/local/bin/xscreensaver
# set permission
chown -R $AZER:wheel /home/$AZER/

############################################
### Framebuffer                          ###
############################################

cat << EOF >> /etc/crontab
@reboot                                 root    ( sleep 2 ; service slim restart )
EOF

#gpu=`pciconf -lv | grep VirtualBox`
#if [ "$gpu" != '' ]; then 
#cat << EOF >> /etc/crontab
#@reboot                                 root    ( sleep 2 ; service slim restart )
#@reboot                                 root    ( sleep 4 ; service slim restart )
#@reboot                                 root    ( sleep 6 ; service slim restart )
#EOF
#fi

case "$DRIV" in
 amdgpu)
 # detect amdgpu, need reboot...
 #reboot
 #kldunload amdgpu.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf
Section "Device"
         Identifier "Standart"
         Driver "vesa"
EndSection
EOF
 ;;
 radeon)
 # detect radeon, need reboot...
 #reboot
 #kldunload radeonkms.ko
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf
Section "Device"
         Identifier "Radeon"
         Driver "vesa"
EndSection
EOF
 ;;
 intel)
 # detect intel, need fix...
cat << EOF >> /etc/crontab
@reboot                                 root    ( sleep 8 ; service slim restart )
EOF
 ;;
 vesa)
cat << EOF > /usr/local/etc/X11/xorg.conf.d/xorg.conf
Section "Device"
         Identifier "Vesa"
         Driver "vesa"
EndSection
EOF
 ;;
 *)
 # detect all
 
 ;;
esac

############################################
### Final stage                          ###
############################################
# startx
cd /home/$AZER
service dbus start
#service hald start
service slim start
su $AZER -c 'startx'
